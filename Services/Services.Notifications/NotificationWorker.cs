using Core.Interfaces;
using Core.Models;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Services.Notifications
{
    public class NotificationWorker : BackgroundService
    {
        private readonly INotificationService _notifier;
        private readonly ILogger<NotificationWorker> _logger;

        public NotificationWorker(CompositeNotificationService notifier, ILogger<NotificationWorker> log)
        {
            _notifier = notifier;
            _logger   = log;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation("NotificationWorker starting at {Time}", DateTimeOffset.Now);
            while (!stoppingToken.IsCancellationRequested)
            {
                // TODO: Replace with real queue or DB fetch
                var alert = new NotificationMessage
                {
                    Channel = NotificationChannel.Email,
                    Subject = "Demo Alert",
                    Body    = "This alert was generated by the NotificationWorker.",
                    Metadata = null
                };

                await _notifier.NotifyAsync(alert, stoppingToken);
                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);
            }
        }
    }
}
